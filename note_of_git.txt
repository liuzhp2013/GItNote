git学习笔记

一、安装（http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000）
二、配置全局参数
	git config --global user.name "<yourUserName>"
	git config --global user.email "<yourEmail>"
	
三、创建版本库
	1，创建一个空的版本库
		1）在合适的位置创建一个空目录
			mkdir <dirname>
			cd <dirname>
			pwd 
		2) 将上述空目录<dirname>变成git可以管理的仓库
			git init
	2，把文件添加到版本库
		1) 在<dirname>目录或其子目录下新建一个文本文件并输入文本内容，如readme.txt
		2) 将上述文本文件添加到仓库
			git add <filename>
		3) 提交文件到仓库
			git commit -m "wrote a readme file"
			
四、操作版本库：
	1，修改版本库中文件
	2，查看工作区状态： git status
	3，查看同一项目修改前后的详细差异: git diff
	4，提交修改：
		git add <filename>
		git commit -m "<description>"	
	
	注解：
		要随时掌握工作区的状态，使用git status命令。
		如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

	5，查看版本历史记录： 
		git log
		git log --pretty=oneline
	6，切换到当前版本或以前的版本（从新版本到旧版本）：
		git reset head           //切换到当前版本
		git reset head^          //切换到当前版本的上一版本
		git reset head^^         //切换到当前版本的上上一版本
		git reset <commit id>    //根据commit id 切换到指定版本
	7，切换到当前版本以后的版本（从旧版本到新版本）：
		第一步：查看命令历史记录获取commit id
			git reflog
		第二步：根据commit id 切换到指定版本
			git reset <commit id>
			
		注解：
			HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

			穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		
			要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
			
	8，工作区、暂存区、版本库
		工作区：即版本库所在的目录
		暂存区：git管理的内存中的一块区域
		版本库：.git目录即为版本库
			
	9，撤销修改：
		1）撤销对工作区（即还未执行git add <file>）的修改:
			git checkout -- <file>
		2）撤销对暂存区的修改（即已经执行了git add <file>，但还没有执行git commit -m "description"）
			第一步：git reset HEAD <file>
			第二步：git checkout -- <file>
		3) 撤销对本地版本库的修改：直接回退到上一个版本（参考“6，切换到当前版本或以前的版本（从新版本到旧版本）：”）
		
	10，删除文件：
		当工作区中的某一文件（前提是该文件已提交到版本库）被删除（手动删除或通过rm -rf <file>）后,该文件在版本库中的备份依然存在，
		若想将该文件从版本库中移除，执行git rm <file>;
		若想将该文件恢复到工作区，则执行git checkout -- <file>
		
五，远程仓库

	1，在github上创建远程版本库
		1) 注册一个github账号
		2）生成SSH key（密钥对），
		3）添加公钥（id_rsa.pub）到github账号
		4）在github上创建远程库
		5）关联本地库与远程库
			git remote add origin <yourRemoteRepositoryAddress>
		6) 将本地仓库推送到远程仓库；
			git push [-u] origin master
	
			注意：第5）步关联远程仓库时，若出现如下异常fatal: remote origin already exists.表明当前本地库试图与两个或两个以上同名的远程仓库关联：
				  解决办法：将已经建立的关联移除，再重新关联即可：
							首先，清楚远程仓库 git remote rm origin
							然后，重新关联：git remote add origin <yourRepositoryAddress>
		7）将远程仓库克隆到本地：
			git clone <yourRemoteRepositoryAddress>
			
六、分支：
	1，创建分支：git branch <branchName>
	2，切换分支：git checkout <branchName>
	3，创建并切换分支：git checkout <branchName>
	4，查看当前分支：git branch
	5，在新分支上工作（如add、commit等）
	6，切换回主分支（master），并将其他分支（如dev）合并到主分支上
	7，删除分支: git branch -d <branchName>
	
	当git因冲突而无法自动合并时，必须首先手动解决冲突，然后重新add、commit，在进行merge
	8，查看分支合并图：git log --graph
	
	分支策略：
		1，主分支步充当具体的工作分支，只用于项目版本的merge
		2，每个用户在自己单独的分支feature上工作，完了以后统一merge到公共的dev分支，最后发布新版本时在merge到master
==============================================================================================================================================

小结:

配置全局参数：
	git config --global user.name "<yourUserName>"

初始化Git仓库:
	git init
	

添加文件到Git仓库：

	第一步，添加：git add <filename> 可反复多次使用，添加多个文件；

	第二步，提交：git commit -m "<description>"

查看工作区状态：git status

对比修改前后的差异：git diff

远程仓库相关操作小结：
	本地仓库想远程仓库推送：
		第一步：注册github账号：
		第二步：生成ssh key 密钥对
		第三步：将生成的公钥添加到github账号中
		第四步：在github上创建远程仓库：如gitNote
		第五步：关联本地仓库与远程仓库：git remote add origin <yourRemoteRepositoryAddress>
		第六步：将本地仓库推送到远程仓库的主分支上：git push [-u] origin master
	远程仓库向本地仓库克隆：
		git clone <yourRemoteRepositoryAddress>

在新分支上工作的流程小结：
	第一步：创建新分支：git branch <branchName>
	第二步：切换到工作分支上 git checkout <branchName>
	第三部：在工作分支上进行add、commit等操作
	第四步：工作分支上的任务完成后，切换回主分支 git checkout master
	第五步：将工作分支合并到主分支 	git merge <branchName>
	第六步：删除工作分支： git branch -d <branchName>
==============================================================================================================================================
	